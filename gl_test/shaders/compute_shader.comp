#version 460 core

// The first layout qualifier defines the size of the local work group
layout (local_size_x = 1, local_size_y = 1) in;
// The second layout qualifier defines the internal format of the image that we set up. Note that 
// we use an image2D uniform, rather than a texture sampler. This gives us the ability to write to
// any pixel that we want
layout(rgba32f, binding = 0) uniform image2D imgOutput;

void main()
{
  // Base pixel colour for image
  vec4 pixel = vec4 (0.0, 0.0, 0.0, 1.0);
  // Get index in global work group i.e x,y position
  ivec2 pixelCoords = ivec2 (gl_GlobalInvocationID.xy);

  float maxX = 5.0;
  float maxY = 5.0;
  ivec2 dims = imageSize(imgOutput);

  float x = (float(pixelCoords.x * 2 - dims.x) / dims.x);
  float y = (float(pixelCoords.y * 2 - dims.y) / dims.y);

  vec3 rayO = vec3 (x * maxX, y * maxY, 0.0);
  vec3 rayD = vec3 (0.0, 0.0, -1.0);

  vec3 sphereC = vec3 (0.0, 0.0, -10.0);
  float sphereR = 1.0;
  
  vec3 omc = rayO - sphereC;
  float b = dot (rayD, omc);
  float c = dot (omc, omc) - sphereR * sphereR;
  float bsqmc = b * b - c;
  float t = 10000.0;

  if (bsqmc >= 0.0)
  {
    pixel = vec4 (0.4, 0.4, 1.0, 1.0);
  }

  // Output to a specific pixel in the image
  imageStore(imgOutput, pixelCoords, pixel);
}